<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mori.demo.mapper.UserMapper">

    <!--定义封装主表user和从表account的resultMap-->
    <resultMap id="userAccountMap" type="user">
        <!--user内容-->
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="sex" column="sex"></result>
        <result property="address" column="address"></result>
        <result property="birthday" column="birthday"></result>
        <!--account(关联)内容，看作一对一-->
        <collection property="accounts" ofType="account"> <!--新增关联属性名、集合中每个元素的类型-->
            <id property="id" column="aid"></id> <!--因为两表的两个id重复,所以sql中起了别名-->
            <result property="uid" column="uid"></result>
            <result property="money" column="money"></result>
        </collection>
    </resultMap>

    <resultMap id="userRoleMap" type="user">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="sex" column="sex"></result>
        <result property="address" column="address"></result>
        <result property="birthday" column="birthday"></result>
        <collection property="roles" ofType="role">
            <id property="id" column="role_id"></id>
            <result property="roleName" column="role_name"></result>
            <result property="roleDesc" column="role_desc"></result>
        </collection>
    </resultMap>

    <!--查询所有用户-->
    <!--<select id="findAll" resultType="com.mori.demo.domain.User">
        select * from eesy_mybatis.user ;
    </select>-->

    <!--查询所有用户,关联账户-->
    <select id="findAllWithAccount" resultMap="userAccountMap">
        select
            u.*,
            a.id as aid,
            a.uid,
            a.money
        from
            eesy_mybatis.user u
        left join  eesy_mybatis.account a
        on u.id = a.uid
    </select>

    <!--查询所有用户,关联角色-->
    <select id="findAllWithRole" resultMap="userRoleMap">
        select
            u.*,
            r.id as role_id,
            r.ROLE_NAME as role_name,
            r.ROLE_NAME as role_desc
        from
            eesy_mybatis.user u
        left join eesy_mybatis.user_role t on
            u.id = t.uid
        left join eesy_mybatis.role r on
            t.rid = r.id
    </select>

    <!--添加用户-->
    <insert id="saveUser" parameterType="com.mori.demo.domain.User">
        insert into eesy_mybatis.user
        (username,birthday,sex,address)
        values
        (#{username},#{birthday},#{sex},#{address})

        <!-- 获取插入记录的id -->
        <!-- keyProperty：对应实体属性名，keyColumn：对应数据表字段名，resultType: resultType：返回的数据类型，order：什么时候执行-->
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
    </insert>

    <!--更新用户-->
    <update id="updateUser" parameterType="com.mori.demo.domain.User">
        update eesy_mybatis.user
        set username = #{username},
            birthday = #{birthday},
            sex = #{sex},
            address = #{address}
        where id = #{id}
    </update>

    <!--删除用户-->
    <update id="deleteUser" parameterType="java.lang.Integer">
        delete from eesy_mybatis.user
        where id = #{userId}
    </update>

    <!--查询一个用户-->
    <select id="findById" parameterType="int" resultType="user">
        select * from eesy_mybatis.user where id = #{userId};
    </select>

    <!--模糊查询用户-->
    <select id="findByName" parameterType="java.lang.String" resultType="com.mori.demo.domain.User">
        <!-- select * from eesy_mybatis.user where username like #{username}; -->
        select * from eesy_mybatis.user where username like '%${value}%';
    </select>

    <!--查询总用户数-->
    <select id="findTotal" resultType="int">
        select count(id) from eesy_mybatis.user ;
    </select>

    <!--根据QueryVo中的查询条件，查询用户-->
    <select id="findUserByVo" parameterType="com.mori.demo.domain.QueryVo" resultType="com.mori.demo.domain.User">
        select * from eesy_mybatis.user where username like #{user.username};
    </select>

    <!-- 根据传入参数条件查询 -->
    <select id="findUserByCondition" parameterType="user" resultType="user">
        select * from eesy_mybatis.user
        <where>
            <if test="username != null">
                and username = #{username}
            </if>
            <if test="sex != null">
                and sex = #{sex}
            </if>
        </where>
    </select>

    <!--抽取重复代码-->
    <sql id="defaultUser">
        select * from eesy_mybatis.user
    </sql>

    <!--根据 id 集合查询用户信息-->
    <select id="findUserByIds" parameterType="QueryVo" resultType="user">
        <include refid="defaultUser"></include>
        <where>
            <if test="ids != null and ids.size()>0">
                <foreach collection="ids" open="and id in (" close=")" item="id" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>

</mapper>